import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as o,o as r}from"./app-D-KKd9EU.js";const e="/tir-docs/assets/image1-DPyC0WeH.png",a="/tir-docs/assets/image2-CN5LNVYU.png",n="/tir-docs/assets/image3-CDXvSytA.png",l="/tir-docs/assets/image4-BwL8a6Eu.png",p={};function c(d,i){return r(),s("div",null,i[0]||(i[0]=[o('<ol><li>On the target host system, create a target deployment folder (i.e. /opt/tir).</li></ol><p>$ mkdir /opt/tir</p><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>Copy over the latest bootstrap script from the pipeline job artifacts. This script is built in the pre-deploy stage of the current TIR gitlab pipeline and can be found in the “Prepare docker-compose” job artifacts (i.e. <a href="https://gitlab.us.lmco.com/e348832/tir/-/jobs/125468922/artifacts/browse" target="_blank" rel="noopener noreferrer">https://gitlab.us.lmco.com/e348832/tir/-/jobs/125468922/artifacts/browse</a>).</li></ol><p><em>It is important to use the job artifact script as it compiles text from the other run-time scripts necessary for the TIR deployment.</em></p><ol start="3"><li><p>Generate the supporting files.</p><p>a. Move the bootstrap_tir.sh file into the target deployment folder.</p><p>b. Set the bootstrap_tir.sh mode to executable</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>  $ chmod +x /opt/tir/bootstrap_tir.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><pre><code>c.  From the deployment folder as the working directory, run the executable
</code></pre><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&gt; $ ./bootstrap_tir.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><pre><code>d.  Follow the instructions in the bootstrap to generate the supporting files

    i.  It will ask if a database is being deployed and then will provide questions with example answers as well as default values if no prompt is given

    ii.  Tips:

        1.  Images: Use images from public/private repos that match images listed in the default example, the hosting registry may differ but the image:tag should be similar (i.e.
        your.private.registry/project/tir:v1.0.1 matches our.private.registry/our_project/tir:v1.0.1).

        2.  SQLITE (optional): should be true if using sqlite instead of another SQL db instance – only visible when deploying a database

        3.  USE_CUSTOM_REPO: This deployment allows for the nginx reverse proxy to restart upon receiving updated and valid SSL host certificates. It thus requires installation of the following packages: (openssl inotify-tools procps-ng psmisc). OpenSSL validates the certificates, inotify-tools allows for monitoring of the staged-certificate shared volume, and Procps-ng/psmisc allow the image to search for the running inotify process, and stop it, thus restarting the reverse proxy. **Set this variable to true if your server requires a private yum repository**.
</code></pre><figure><img src="`+a+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><pre><code>    iii.  At the end of the setup, the bootstrap script will display a massage stating which files had been created based on the selections in the prompts. Note the next steps listed at the bottom.
</code></pre><figure><img src="`+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><pre><code>e.  *If the server is using a private yum repository*, copy the following into the target deployment&#39;s nginx_renew folder from the matching tir repository’s deployment folder:

    i.  A cachain cert (.pem file) for ca-trust
</code></pre><p>(For LM instances)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ curl http://crl.external.lmco.com/trust/pem/combined/Combined_pem.pem -o nginx_renew/cachain.pem</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><pre><code>f. .repo file(s) to be used from where openssl, inotify-tools, procps-ng, psmisc can be installed.

(For LM instances)
</code></pre><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ sed -i &quot;s/#INSERTTOKEN#/$EFOSS\\_TOKEN/g&quot; nginx\\_renew/efoss.repo &amp;&amp; \\\\</span></span>
<span class="line"><span>$ sed -i &quot;s/#INSERTUSERNAME#/$EFOSS\\_USER/g&quot; nginx\\_renew/efoss.repo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>g.  A yum.conf file if necessary
</code></pre><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li><p>Install docker-compose, see <a href="https://cctdocs.pages.gitlab.us.lmco.com/ironforge/hosting/deployment/index.html" target="_blank" rel="noopener noreferrer">https://cctdocs.pages.gitlab.us.lmco.com/ironforge/hosting/deployment/index.html</a> and perform</p><p>a. Preparation<br> b. docker-compose<br> c. Netavark network_backend install/config</p></li><li><p>Use docker-compose to bring up the deployment</p><p>a. From your working directory bring up the environment with</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ docker-compose up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><pre><code>b.  To see logs on your compose up use (use -f to follow)
</code></pre><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ docker-compose logs -f</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><pre><code>c.  To bring down the deployment, run the following:
</code></pre><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ docker-compose down</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><pre><code>d.  Remove the volumes created by running
</code></pre><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$ podman volume ls # shows a list of created podman volumes</span></span>
<span class="line"><span>&gt; $ podman volume rm tir-... # Only use for volumes created by this docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',31)]))}const m=t(p,[["render",c]]),u=JSON.parse('{"path":"/courses/tir_deployment_guide/02_DockerComposeDeployment.html","title":"Deployment Using Docker-Compose","lang":"en-US","frontmatter":{"order":2,"next":"03_CertificateImportAndVerification.md","title":"Deployment Using Docker-Compose","shortTitle":"1. Docker Compose Deployment","author":"Jason Kerbelis","headerDepth":4,"toc":{"levels":[2,6]},"description":"On the target host system, create a target deployment folder (i.e. /opt/tir). $ mkdir /opt/tir Copy over the latest bootstrap script from the pipeline job artifacts. This script...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Deployment Using Docker-Compose\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-12T23:38:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jason Kerbelis\\"}]}"],["meta",{"property":"og:url","content":"https://mitre.github.io/tir-docs/tir-docs/courses/tir_deployment_guide/02_DockerComposeDeployment.html"}],["meta",{"property":"og:site_name","content":"Test Ingest Repository Docs"}],["meta",{"property":"og:title","content":"Deployment Using Docker-Compose"}],["meta",{"property":"og:description","content":"On the target host system, create a target deployment folder (i.e. /opt/tir). $ mkdir /opt/tir Copy over the latest bootstrap script from the pipeline job artifacts. This script..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-12T23:38:54.000Z"}],["meta",{"property":"article:author","content":"Jason Kerbelis"}],["meta",{"property":"article:modified_time","content":"2025-02-12T23:38:54.000Z"}]]},"git":{"createdTime":1736974668000,"updatedTime":1739403534000,"contributors":[{"name":"jaykerbelis","username":"jaykerbelis","email":"129434268+jaykerbelis@users.noreply.github.com","commits":4,"url":"https://github.com/jaykerbelis"},{"name":"Aaron Lippold","username":"","email":"lippold@gmail.com","commits":1}]},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"courses/tir_deployment_guide/02_DockerComposeDeployment.md","autoDesc":true}');export{m as comp,u as data};
